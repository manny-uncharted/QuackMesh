/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface InferencePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createInferenceJob"
      | "duckToken"
      | "jobs"
      | "nextJobId"
      | "payProvider"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "InferenceJobCreated" | "InferencePaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createInferenceJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "duckToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payProvider",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createInferenceJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duckToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payProvider",
    data: BytesLike
  ): Result;
}

export namespace InferenceJobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    requester: AddressLike,
    totalBudget: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    requester: string,
    totalBudget: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    requester: string;
    totalBudget: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InferencePaidEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    provider: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, provider: string, amount: bigint];
  export interface OutputObject {
    jobId: bigint;
    provider: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InferencePool extends BaseContract {
  connect(runner?: ContractRunner | null): InferencePool;
  waitForDeployment(): Promise<this>;

  interface: InferencePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createInferenceJob: TypedContractMethod<
    [totalBudget: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  duckToken: TypedContractMethod<[], [string], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        requester: string;
        totalBudget: bigint;
        remaining: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  payProvider: TypedContractMethod<
    [jobId: BigNumberish, provider: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createInferenceJob"
  ): TypedContractMethod<[totalBudget: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "duckToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        requester: string;
        totalBudget: bigint;
        remaining: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payProvider"
  ): TypedContractMethod<
    [jobId: BigNumberish, provider: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "InferenceJobCreated"
  ): TypedContractEvent<
    InferenceJobCreatedEvent.InputTuple,
    InferenceJobCreatedEvent.OutputTuple,
    InferenceJobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InferencePaid"
  ): TypedContractEvent<
    InferencePaidEvent.InputTuple,
    InferencePaidEvent.OutputTuple,
    InferencePaidEvent.OutputObject
  >;

  filters: {
    "InferenceJobCreated(uint256,address,uint256)": TypedContractEvent<
      InferenceJobCreatedEvent.InputTuple,
      InferenceJobCreatedEvent.OutputTuple,
      InferenceJobCreatedEvent.OutputObject
    >;
    InferenceJobCreated: TypedContractEvent<
      InferenceJobCreatedEvent.InputTuple,
      InferenceJobCreatedEvent.OutputTuple,
      InferenceJobCreatedEvent.OutputObject
    >;

    "InferencePaid(uint256,address,uint256)": TypedContractEvent<
      InferencePaidEvent.InputTuple,
      InferencePaidEvent.OutputTuple,
      InferencePaidEvent.OutputObject
    >;
    InferencePaid: TypedContractEvent<
      InferencePaidEvent.InputTuple,
      InferencePaidEvent.OutputTuple,
      InferencePaidEvent.OutputObject
    >;
  };
}
