/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrainingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTrainingJob"
      | "distributeReward"
      | "duckToken"
      | "jobs"
      | "nextJobId"
      | "submissions"
      | "submitUpdate"
      | "verifyProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardDistributed"
      | "TrainingJobCreated"
      | "UpdateSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createTrainingJob",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "duckToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitUpdate",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTrainingJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duckToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace RewardDistributedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrainingJobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    requester: AddressLike,
    modelHash: BytesLike,
    totalReward: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    requester: string,
    modelHash: string,
    totalReward: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    requester: string;
    modelHash: string;
    totalReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSubmittedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    contributor: AddressLike,
    updateHash: BytesLike,
    accuracyBps: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    contributor: string,
    updateHash: string,
    accuracyBps: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    contributor: string;
    updateHash: string;
    accuracyBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrainingPool extends BaseContract {
  connect(runner?: ContractRunner | null): TrainingPool;
  waitForDeployment(): Promise<this>;

  interface: TrainingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTrainingJob: TypedContractMethod<
    [modelHash: BytesLike, totalRewardPool: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  distributeReward: TypedContractMethod<
    [jobId: BigNumberish, submissionIdx: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  duckToken: TypedContractMethod<[], [string], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        requester: string;
        modelHash: string;
        totalReward: bigint;
        remaining: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  submissions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        contributor: string;
        updateHash: string;
        accuracyBps: bigint;
        rewarded: boolean;
      }
    ],
    "view"
  >;

  submitUpdate: TypedContractMethod<
    [jobId: BigNumberish, updateHash: BytesLike, accuracyBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyProof: TypedContractMethod<
    [accuracyBps: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTrainingJob"
  ): TypedContractMethod<
    [modelHash: BytesLike, totalRewardPool: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<
    [jobId: BigNumberish, submissionIdx: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "duckToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        requester: string;
        modelHash: string;
        totalReward: bigint;
        remaining: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        contributor: string;
        updateHash: string;
        accuracyBps: bigint;
        rewarded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitUpdate"
  ): TypedContractMethod<
    [jobId: BigNumberish, updateHash: BytesLike, accuracyBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<[accuracyBps: BigNumberish], [boolean], "view">;

  getEvent(
    key: "RewardDistributed"
  ): TypedContractEvent<
    RewardDistributedEvent.InputTuple,
    RewardDistributedEvent.OutputTuple,
    RewardDistributedEvent.OutputObject
  >;
  getEvent(
    key: "TrainingJobCreated"
  ): TypedContractEvent<
    TrainingJobCreatedEvent.InputTuple,
    TrainingJobCreatedEvent.OutputTuple,
    TrainingJobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSubmitted"
  ): TypedContractEvent<
    UpdateSubmittedEvent.InputTuple,
    UpdateSubmittedEvent.OutputTuple,
    UpdateSubmittedEvent.OutputObject
  >;

  filters: {
    "RewardDistributed(uint256,address,uint256)": TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
    RewardDistributed: TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;

    "TrainingJobCreated(uint256,address,bytes32,uint256)": TypedContractEvent<
      TrainingJobCreatedEvent.InputTuple,
      TrainingJobCreatedEvent.OutputTuple,
      TrainingJobCreatedEvent.OutputObject
    >;
    TrainingJobCreated: TypedContractEvent<
      TrainingJobCreatedEvent.InputTuple,
      TrainingJobCreatedEvent.OutputTuple,
      TrainingJobCreatedEvent.OutputObject
    >;

    "UpdateSubmitted(uint256,address,bytes32,uint96)": TypedContractEvent<
      UpdateSubmittedEvent.InputTuple,
      UpdateSubmittedEvent.OutputTuple,
      UpdateSubmittedEvent.OutputObject
    >;
    UpdateSubmitted: TypedContractEvent<
      UpdateSubmittedEvent.InputTuple,
      UpdateSubmittedEvent.OutputTuple,
      UpdateSubmittedEvent.OutputObject
    >;
  };
}
