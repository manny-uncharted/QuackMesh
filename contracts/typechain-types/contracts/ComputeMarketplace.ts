/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ComputeMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "duckToken"
      | "listMachine"
      | "machines"
      | "nextJobId"
      | "nextMachineId"
      | "rentMachine"
      | "rentMachineWithJob"
      | "unlistMachine"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MachineListed"
      | "MachineRented"
      | "MachineUnlisted"
      | "TrainingJobCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "duckToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listMachine",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "machines",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextMachineId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentMachine",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentMachineWithJob",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistMachine",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "duckToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listMachine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "machines", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMachineId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentMachine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentMachineWithJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistMachine",
    data: BytesLike
  ): Result;
}

export namespace MachineListedEvent {
  export type InputTuple = [
    machineId: BigNumberish,
    provider: AddressLike,
    specs: string,
    pricePerHourInDuck: BigNumberish
  ];
  export type OutputTuple = [
    machineId: bigint,
    provider: string,
    specs: string,
    pricePerHourInDuck: bigint
  ];
  export interface OutputObject {
    machineId: bigint;
    provider: string;
    specs: string;
    pricePerHourInDuck: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MachineRentedEvent {
  export type InputTuple = [
    machineId: BigNumberish,
    renter: AddressLike,
    hoursPaid: BigNumberish,
    totalPaidDuck: BigNumberish
  ];
  export type OutputTuple = [
    machineId: bigint,
    renter: string,
    hoursPaid: bigint,
    totalPaidDuck: bigint
  ];
  export interface OutputObject {
    machineId: bigint;
    renter: string;
    hoursPaid: bigint;
    totalPaidDuck: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MachineUnlistedEvent {
  export type InputTuple = [machineId: BigNumberish];
  export type OutputTuple = [machineId: bigint];
  export interface OutputObject {
    machineId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrainingJobCreatedEvent {
  export type InputTuple = [
    machineId: BigNumberish,
    renter: AddressLike,
    jobId: BigNumberish,
    modelId: string,
    datasetId: string
  ];
  export type OutputTuple = [
    machineId: bigint,
    renter: string,
    jobId: bigint,
    modelId: string,
    datasetId: string
  ];
  export interface OutputObject {
    machineId: bigint;
    renter: string;
    jobId: bigint;
    modelId: string;
    datasetId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComputeMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): ComputeMarketplace;
  waitForDeployment(): Promise<this>;

  interface: ComputeMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  duckToken: TypedContractMethod<[], [string], "view">;

  listMachine: TypedContractMethod<
    [specs: string, pricePerHourInDuck: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  machines: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        provider: string;
        specs: string;
        pricePerHourInDuck: bigint;
        listed: boolean;
      }
    ],
    "view"
  >;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  nextMachineId: TypedContractMethod<[], [bigint], "view">;

  rentMachine: TypedContractMethod<
    [machineId: BigNumberish, hoursPaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  rentMachineWithJob: TypedContractMethod<
    [
      machineId: BigNumberish,
      hoursPaid: BigNumberish,
      modelId: string,
      datasetId: string
    ],
    [bigint],
    "nonpayable"
  >;

  unlistMachine: TypedContractMethod<
    [machineId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "duckToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "listMachine"
  ): TypedContractMethod<
    [specs: string, pricePerHourInDuck: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "machines"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        provider: string;
        specs: string;
        pricePerHourInDuck: bigint;
        listed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextMachineId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rentMachine"
  ): TypedContractMethod<
    [machineId: BigNumberish, hoursPaid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rentMachineWithJob"
  ): TypedContractMethod<
    [
      machineId: BigNumberish,
      hoursPaid: BigNumberish,
      modelId: string,
      datasetId: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlistMachine"
  ): TypedContractMethod<[machineId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "MachineListed"
  ): TypedContractEvent<
    MachineListedEvent.InputTuple,
    MachineListedEvent.OutputTuple,
    MachineListedEvent.OutputObject
  >;
  getEvent(
    key: "MachineRented"
  ): TypedContractEvent<
    MachineRentedEvent.InputTuple,
    MachineRentedEvent.OutputTuple,
    MachineRentedEvent.OutputObject
  >;
  getEvent(
    key: "MachineUnlisted"
  ): TypedContractEvent<
    MachineUnlistedEvent.InputTuple,
    MachineUnlistedEvent.OutputTuple,
    MachineUnlistedEvent.OutputObject
  >;
  getEvent(
    key: "TrainingJobCreated"
  ): TypedContractEvent<
    TrainingJobCreatedEvent.InputTuple,
    TrainingJobCreatedEvent.OutputTuple,
    TrainingJobCreatedEvent.OutputObject
  >;

  filters: {
    "MachineListed(uint256,address,string,uint256)": TypedContractEvent<
      MachineListedEvent.InputTuple,
      MachineListedEvent.OutputTuple,
      MachineListedEvent.OutputObject
    >;
    MachineListed: TypedContractEvent<
      MachineListedEvent.InputTuple,
      MachineListedEvent.OutputTuple,
      MachineListedEvent.OutputObject
    >;

    "MachineRented(uint256,address,uint256,uint256)": TypedContractEvent<
      MachineRentedEvent.InputTuple,
      MachineRentedEvent.OutputTuple,
      MachineRentedEvent.OutputObject
    >;
    MachineRented: TypedContractEvent<
      MachineRentedEvent.InputTuple,
      MachineRentedEvent.OutputTuple,
      MachineRentedEvent.OutputObject
    >;

    "MachineUnlisted(uint256)": TypedContractEvent<
      MachineUnlistedEvent.InputTuple,
      MachineUnlistedEvent.OutputTuple,
      MachineUnlistedEvent.OutputObject
    >;
    MachineUnlisted: TypedContractEvent<
      MachineUnlistedEvent.InputTuple,
      MachineUnlistedEvent.OutputTuple,
      MachineUnlistedEvent.OutputObject
    >;

    "TrainingJobCreated(uint256,address,uint256,string,string)": TypedContractEvent<
      TrainingJobCreatedEvent.InputTuple,
      TrainingJobCreatedEvent.OutputTuple,
      TrainingJobCreatedEvent.OutputObject
    >;
    TrainingJobCreated: TypedContractEvent<
      TrainingJobCreatedEvent.InputTuple,
      TrainingJobCreatedEvent.OutputTuple,
      TrainingJobCreatedEvent.OutputObject
    >;
  };
}
