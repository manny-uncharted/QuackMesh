/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  InferencePool,
  InferencePoolInterface,
} from "../../contracts/InferencePool";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_duckToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "jobId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBudget",
        type: "uint256",
      },
    ],
    name: "InferenceJobCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "jobId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "InferencePaid",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalBudget",
        type: "uint256",
      },
    ],
    name: "createInferenceJob",
    outputs: [
      {
        internalType: "uint256",
        name: "jobId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "duckToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "jobs",
    outputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalBudget",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextJobId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "jobId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610e1a380380610e1a833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b608051610ce3610137600039600081816102d20152818161044801526106620152610ce36000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063180aedf31461005c578063402943291461008f578063b07efe72146100ab578063b0c2aa5e146100db578063b375bb64146100f9575b600080fd5b610076600480360381019061007191906106bf565b610117565b6040516100869493929190610757565b60405180910390f35b6100a960048036038101906100a491906107c8565b610174565b005b6100c560048036038101906100c091906106bf565b610402565b6040516100d2919061081b565b60405180910390f35b6100e361065a565b6040516100f0919061081b565b60405180910390f35b610101610660565b60405161010e9190610895565b60405180910390f35b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16905084565b60006001600085815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102149061090d565b60405180910390fd5b8060030160009054906101000a900460ff1661026e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026590610979565b60405180910390fd5b80600201548211156102b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac906109e5565b60405180910390fd5b818160020160008282546102c99190610a34565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b815260040161032b929190610a68565b6020604051808303816000875af115801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610abd565b6103ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a490610b36565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16847fdfef63ec5cbc0237daf5e6f1311b77b07510db00b9c24552c7330aede5d70fc2846040516103f4919061081b565b60405180910390a350505050565b6000808211610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043d90610ba2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104a393929190610bc2565b6020604051808303816000875af11580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190610abd565b610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c90610c45565b60405180910390fd5b600080815461053390610c65565b919050819055905060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001838152602001600115158152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16817f12290314d84615ec5642a461be8cc12eb3cef65824f3aee313ef53fc52df5a398460405161064d919061081b565b60405180910390a3919050565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080fd5b6000819050919050565b61069c81610689565b81146106a757600080fd5b50565b6000813590506106b981610693565b92915050565b6000602082840312156106d5576106d4610684565b5b60006106e3848285016106aa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610717826106ec565b9050919050565b6107278161070c565b82525050565b61073681610689565b82525050565b60008115159050919050565b6107518161073c565b82525050565b600060808201905061076c600083018761071e565b610779602083018661072d565b610786604083018561072d565b6107936060830184610748565b95945050505050565b6107a58161070c565b81146107b057600080fd5b50565b6000813590506107c28161079c565b92915050565b6000806000606084860312156107e1576107e0610684565b5b60006107ef868287016106aa565b9350506020610800868287016107b3565b9250506040610811868287016106aa565b9150509250925092565b6000602082019050610830600083018461072d565b92915050565b6000819050919050565b600061085b610856610851846106ec565b610836565b6106ec565b9050919050565b600061086d82610840565b9050919050565b600061087f82610862565b9050919050565b61088f81610874565b82525050565b60006020820190506108aa6000830184610886565b92915050565b600082825260208201905092915050565b7f6f6e6c7920726571756573746572000000000000000000000000000000000000600082015250565b60006108f7600e836108b0565b9150610902826108c1565b602082019050919050565b60006020820190508181036000830152610926816108ea565b9050919050565b7f696e616374697665000000000000000000000000000000000000000000000000600082015250565b60006109636008836108b0565b915061096e8261092d565b602082019050919050565b6000602082019050818103600083015261099281610956565b9050919050565b7f6578636565647320627564676574000000000000000000000000000000000000600082015250565b60006109cf600e836108b0565b91506109da82610999565b602082019050919050565b600060208201905081810360008301526109fe816109c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a3f82610689565b9150610a4a83610689565b9250828203905081811115610a6257610a61610a05565b5b92915050565b6000604082019050610a7d600083018561071e565b610a8a602083018461072d565b9392505050565b610a9a8161073c565b8114610aa557600080fd5b50565b600081519050610ab781610a91565b92915050565b600060208284031215610ad357610ad2610684565b5b6000610ae184828501610aa8565b91505092915050565b7f7472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610b20600f836108b0565b9150610b2b82610aea565b602082019050919050565b60006020820190508181036000830152610b4f81610b13565b9050919050565b7f6275646765743d30000000000000000000000000000000000000000000000000600082015250565b6000610b8c6008836108b0565b9150610b9782610b56565b602082019050919050565b60006020820190508181036000830152610bbb81610b7f565b9050919050565b6000606082019050610bd7600083018661071e565b610be4602083018561071e565b610bf1604083018461072d565b949350505050565b7f66756e64696e67206661696c6564000000000000000000000000000000000000600082015250565b6000610c2f600e836108b0565b9150610c3a82610bf9565b602082019050919050565b60006020820190508181036000830152610c5e81610c22565b9050919050565b6000610c7082610689565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ca257610ca1610a05565b5b60018201905091905056fea2646970667358221220e692cfde04466daa10e96be14298b283a10d66315ae8ba119ba4f12158b227fa64736f6c63430008180033";

type InferencePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InferencePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InferencePool__factory extends ContractFactory {
  constructor(...args: InferencePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _duckToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_duckToken, overrides || {});
  }
  override deploy(
    _duckToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_duckToken, overrides || {}) as Promise<
      InferencePool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): InferencePool__factory {
    return super.connect(runner) as InferencePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InferencePoolInterface {
    return new Interface(_abi) as InferencePoolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InferencePool {
    return new Contract(address, _abi, runner) as unknown as InferencePool;
  }
}
